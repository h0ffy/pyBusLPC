#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This script captures LPC bus signals from a CSV file and decodes the frames.
# It is designed to work with a specific format of CSV files generated by a logic analyzer.
# The script reads the CSV file, detects the start of frames, captures nibbles,
# and interprets the frames based on the LPC protocol.
import csv
import sys
#from saleae import *
import saleae
import subprocess
import sys,os

SECONDS = 10
Hz = 24_000_000 # 24 MHz (minimum for LPC bus, recommended 48 MHz ro more less than 100 MHz)

class LPCCapture:
    def __init__(self, file_path="record.csv"):
        self._out_file = file_path
        self.recording = False
        self.last_clk = 0
        self.current_nibbles = []
        self.all_frames = []
 
    
    def __call__(self, *args, **kwargs):
        return self.run()
    


    def run(self):
        # Connect to Saleae Logic software

        try:
            logic = saleae.Saleae('localhost', 10429)
            
            

        except Exception as e:
            print(f"Error to start Saleae Logic software Class: {e}")    
        
        # Check if the device is connected
        try:
            logic.set_active_app('Logic')    
            logic.connect()
        except Exception as e:
            print(f"Error connecting to Saleae Logic Device: {e}")
            return


        try:
            # Set active digital channels for LPC: LAD0â€“LAD3, LFRAME#, CLK
            logic.set_active_channels(digital=[0,1,2,3,4,5])

            # Set sample rate (at least 24 MHz)
            logic.set_sample_rate_by_minimum(Hz)

            # Set a trigger: Falling Edge on LFRAME# (assuming D4 = LFRAME#)
            logic.set_trigger_one_channel(channel=4, edge='falling')

            # Capture duration (seconds)
            capture_seconds = SECONDS
        except Exception as e:
            print(f"Error setting up Saleae Logic Device: {e}")
            return


        # Start capture
        try:
            logic.capture_start(duration_seconds=capture_seconds)
        except Exception as e:
            print(f"Error starting capture: {e}")
            return


        try:
            # Wait for capture to complete
            logic.wait_for_capture_complete(timeout_seconds=capture_seconds)
        except Exception as e:
            print(f"Error during capture: {e}")
            return
        # Check if capture was successful
    
    
        if not logic.is_capture_complete():
            print("Capture was not successful.")
            return
        # Export captured data to CSV
        
        try:
        # Wait for capture to complete
            logic.capture_stop()
        except Exception as e:
            print(f"Error stopping capture: {e}")
            return

        # Export captured data to CSV
        try:
            output_file = 'capture.csv'
            logic.capture_to_csv(output_file, analog=False, digital=True)
            logic.export_data(output_file, analog=False, digital=True)
            #login.export_data2
        except Exception as e:
            print(f"Error exporting data: {e}")
            return
        # Disconnect from Saleae Logic device
        try:
            logic.disconnect()
        except Exception as e:
            print(f"Error disconnecting from Saleae Logic Device: {e}")
            return
        # Process the CSV file
        # Launch your LPC decoding class
        # Check if the CSV file was created
        if not os.path.exists(output_file):
            print(f"Error: {output_file} was not created.")
            return
        # Process the CSV file

        try:
            subprocess.run(['python3', 'lpc_decoder.py', output_file])
        except Exception as e:
            print(f"Error running LPC script lpc_decoder.py: {e}")
            return




def banner():
    print(f"Usage: {sys.argv[0]} <file_recorded.csv>")
    sys.exit(1)


# main
if __name__ == "__main__":
    if len(sys.argv) != 2:
        banner()

    recorder = LPCCapture(sys.argv[1])
    recorder.run()

